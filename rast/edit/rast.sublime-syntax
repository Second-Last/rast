%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Rast
file_extensions: [rast]
scope: source.rast

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: pragmas
    - include: decls
    - include: keywords
    - include: indices
    - include: type_operators

  pragmas:
    - match: '#'
      scope: meta.preprocessor.ss
      push:
        - meta_scope: string.unquoted.ss
        - match: $\n?
          pop: true

  decls:
    - match: '\b(type )\b'
      scope: constant.language.ss
      push: expecting_typename

    - match: '\b(proc )\b'
      scope: constant.language.ss
      push: expecting_procname

    - match: '\b(exec )\b'
      scope: constant.language.ss
      push: expecting_procname

    - match: '\b(decl )\b'
      scope: constant.language.ss
      push: expecting_procname

  expecting_procname:
    - meta_scope: procname.ss
    - match: '\b{{ident}}\b'
      scope: variable.parameter.ss

    - match: ' |\n'
      pop: true

  expecting_typename:
    - meta_scope: typename.ss
    - match: '\b{{ident}}\b'
      scope: variable.parameter.ss

    - match: ' '
      pop: true

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(case|wait|close|work|pay|get|tick|delay|now|when|assume|assert|impossible)\b'
      scope: support.constant.ss
    - match: '(\<-\>|L\.|R\.)'
      scope: support.constant.ss

  indices:
    - match: '(\{)'
      #scope: keyword.operator.arithmetic.ss
      push: expecting_closing_parenth

  expecting_closing_parenth:
    - meta_scope: indices.ss

    - match: '(\})'
      #scope: keyword.operator.arithmetic.ss
      pop: true

    - match: '(\+|\*|)'
      scope: keyword.operator.arithmetic.ss

    - match: '[0-9]*'
      scope: keyword.operator.arithmetic.ss

    - match: '[a-z]*'
      scope: keyword.operator.arithmetic.ss


  type_operators:
    - match: '(\+|&|\<\>|\[\]|\(\)|\`|\<\||\|\>)'
      scope: keyword.operator.logical.ss
    - match: '\b(1)\b'
      scope: keyword.operator.logical.ss

  comments:
    # Comments begin with a '%' and finish at the end of the line.
    - match: '%'
      scope: comment.ss
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.ss
        - match: $\n?
          pop: true

    - match: '\(\*'
      scope: comment.ss
      push:
        - meta_scope: comment.ss
        - match: '\*\)'
          pop: true
