#test success

%%% from Henry, email of June 19, 2020

type Stack[A][alpha] = &{ push : A -o Stack[A][Some[A][alpha]],
                          pop : alpha }
type Some[A][alpha] = +{ some : A * Stack[A][alpha] }
type None           = +{ none : 1 }

type Either[A]      = +{ none : 1, some : A * Stack[A][Either[A]] }

%%% Stacks as chains

decl emp[A] : . |- (s : Stack[A][None])
proc s <- emp[A] =
  case s ( push => x <- recv s ;
                   s' <- emp[A] ;
                   s <- elem[A][+{none : 1}] x s'
         | pop => s.none ; close s )

decl elem[A][alpha] : (x : A) (t : Stack[A][alpha]) |- (s : Stack[A][Some[A][alpha]])
proc s <- elem[A][alpha] x t =
  case s ( push => y <- recv s ;
                   s' <- elem[A][alpha] x t ;
                   s <- elem[A][Some[A][alpha]] y s'
         | pop => s.some ; send s x ; s <-> t )

%%% Reversing "imprecise" stacks
%%% hypothesizing a subtyping coercion

decl rev[A] : (a : Stack[A][Either[A]]) (t : Stack[A][Either[A]]) |- (s : Stack[A][Either[A]])
proc s <- rev[A] a t =
  t.pop ;
  case t ( none => wait t ; s <-> a
         | some => x <- recv t ;            % t : Stack[A][Either[A]]
                   a.push ; send a x ;      % a : Stack[A][Some[A][Either[A]]]
                   a' <- stackSomeEither[A] a ;  % a' : Stack[A][Either[A]]
                   s <- rev[A] a' t )

%%% Subtype coercions

%%% these first two are obsolete
% Some[A][Either[A]] <: Either[A]
% None               <: Either[A]
(*
decl someEither[A] : (a : Some[A][Either[A]]) |- (s : Either[A])
decl noneEither[A] : (a : None)               |- (s : Either[A])

proc s <- someEither[A] a =
  case a ( some => x <- recv a ;        % a : Stack[A][Either[A]]
                   s.some ; send s x ;  % s : Stack[A][Either[A]]
                   s <-> a )
proc s <- noneEither[A] a =
  case a ( none =>                      % a : 1
                   s.none ;             % s : 1
                   s <-> a )
*)

%%% Subtype coercions as per Henry's email, June 22
%%%
%%% Stack[A][Some[A][Either[A]]] <: Stack[A][Either[A]]
%%% Stack[A][None]               <: Stack[A][Either[A]]
decl stackSomeEither[A] : (a : Stack[A][Some[A][Either[A]]]) |- (s : Stack[A][Either[A]])
decl stackNoneEither[A] : (a : Stack[A][None])               |- (s : Stack[A][Either[A]])

%%% Generalize, so we can map a coercion over all the elements of a stack
decl fmap[A][alpha][beta] : (f : alpha -o beta) (t : Stack[A][alpha]) |- (s : Stack[A][beta])
decl some_f[A][alpha][beta] : (f : alpha -o beta) |- (g : Some[A][alpha] -o Some[A][beta])

proc s <- fmap[A][alpha][beta] f t =
  case s ( push => t.push ;
                   x <- recv s ; send t x ; % (t : Stack[A][Some[A][alpha]]) |- (s : Stack[A][Some[A][beta]])
                   g <- some_f[A][alpha][beta] f ;  % g : Some[A][alpha] -o Some[A][beta]
                   s <- fmap[A][Some[A][alpha]][Some[A][beta]] g t
         | pop => t.pop ;      % t : alpha
                  send f t ; s <-> f )

proc g <- some_f[A][alpha][beta] f =
  t <- recv g ;
  case t ( some => g.some ;
                   x <- recv t ; send g x ;  % t : Stack[A][alpha] |- g : Stack[A][beta]
                   g <- fmap[A][alpha][beta] f t )

%%% Obtain specific instances
decl some_either[A] : . |- (f : Some[A][Either[A]] -o Either[A])
proc f <- some_either[A] =
  t <- recv f ;
  case t ( some => f.some ;
                   x <- recv t ; send f x ;
                   f <-> t )

decl none_either[A] : . |- (f : None -o Either[A])
proc f <- none_either[A] =
  t <- recv f ;
  case t ( none => f.none ; f <-> t )

proc s <- stackSomeEither[A] t =
  f <- some_either[A] ;                    % f : Some[A][Either[A]] -o Either[A]
  s <- fmap[A][Some[A][Either[A]]][Either[A]] f t

proc s <- stackNoneEither[A] t =
  f <- none_either[A] ;
  s <- fmap[A][None][Either[A]] f t


%%% The two attempts below fail to type-check
(*
proc s <- stackSomeEither[A] a =
  case s ( push => x <- recv s ;         % s : Stack[A][Some[A][Either[A]]]
                   a.push ; send a x ;   % a : Stack[A][Some[A][Some[A][Either[A]]]]
                   s <- stackSomeEither[A] a  % ill-typed!!!
         | pop =>                                      % s : Either[A]
                  a.pop ;                              % a : Some[A][Either[A]]
                  case a ( some => x <- recv a ;       % a : Stack[A][Either[A]]
                                   s.some ; send s x ; % s : Stack[A][Either[A]]
                                   s <-> a ) )
*)

(*
proc s <- stackNoneEither[A] a =
  case s ( push => x <- recv s ;         % s : Stack[A][Some[A][Either[A]]]
                   a.push ; send a x ;   % a : Stack[A][Some[A][None]]
                   s <- stackNoneEither[A] a  % ill-typed!!!
         | pop => a.pop ;                % a : None
                  case a ( none =>       % a : 1
                                   s.none ;
                                   s <-> a ) )
*)

% Trying it out

type nat = +{ z : 1, s : nat }

decl zero : . |- (n : nat)
decl one : . |- (n : nat)
decl two : . |- (n : nat)

proc n <- zero = n.z ; close n
proc n <- one = n.s ; n.z ; close n
proc n <- two = n.s ; n.s ; n.z ; close n

decl s012 : . |- (s : Stack[nat][Some[nat][Some[nat][Some[nat][None]]]])
proc s <- s012 =
  t <- emp[nat] ;
  n0 <- zero ;
  t.push ; send t n0 ;
  n1 <- one ;
  t.push ; send t n1 ;
  n2 <- two ;
  t.push ; send t n2 ;
  s <-> t

decl w012 : . |- (s : Stack[nat][Either[nat]])
proc s <- w012 =
  t <- emp[nat] ;
  t <- stackNoneEither[nat] t ;
  n0 <- zero ;
  t.push ; send t n0 ;
  t <- stackSomeEither[nat] t ;
  n1 <- one ;
  t.push ; send t n1 ;
  t <- stackSomeEither[nat] t ;
  n2 <- two ;
  t.push ; send t n2 ;
  t <- stackSomeEither[nat] t ;
  s <-> t

decl w210 : . |- (s : Stack[nat][Either[nat]])
proc s <- w210 =
  t <- w012 ;
  e <- emp[nat] ;
  e' <- stackNoneEither[nat] e ;
  s <- rev[nat] e' t

exec s012
exec w012
exec w210

type list[A] = +{nil : 1, cons : A * list[A]}

decl stackList[A] : (s : Stack[A][Either[A]]) |- (l : list[A])
proc l <- stackList[A] s =
  s.pop ;  % s : Either[A]
  case s ( some => l.cons ;
                   x <- recv s ; send l x ;
                   l <- stackList[A] s
         | none => l.nil ;
                   wait s ; close l )

decl l012 : . |- (l : list[nat])
proc l <- l012 =
  s <- w012 ;
  l <- stackList[nat] s

decl l210 : . |- (l : list[nat])
proc l <- l210 =
  s <- w210 ;
  l <- stackList[nat] s

exec l012
exec l210
