#test success

type D[x] = +{ L : D[A[x]], R : x }
type A[x] = +{ R : x }
% D[x] = L^n ; R^(n+1) ; x
% A[x] = R ; x

type S = +{ L : D[1] }
% S = L^n ; R^n ; close  (n > 0)

decl L[x] : (da : D[A[x]]) |- (d : D[x])
decl R[x] : (k : x) |- (d : D[x])
decl R_[x] : (k : x) |- (a : A[x])
proc d <- L[x] da = d.L ; d <-> da
proc d <- R[x] k = d.R ; d <-> k
proc a <- R_[x] k = a.R ; a <-> k

type D' = +{ L' : D' * A', R' : 1 }
type A' = +{ R' : 1 }

decl L' : (d' : D') (a' : A') |- (l' : D')
decl R' : . |- (r' : D')
decl R'_ : . |- (r' : A')

proc l' <- L' d' a' = l'.L' ; send l' d' ; l' <-> a'
proc r' <- R' = r'.R' ; close r'
proc r' <- R'_ = r'.R' ; close r'

% Claim : D[x] == D' * x
%         A[x] == A' * x

decl serializeD[x] : (d : D[x]) |- (d'k : D' * x)
decl serializeA[x] : (a : A[x]) |- (a'k : A' * x)

decl deserializeD[x] : (d' : D') (k : x) |- (d : D[x])
decl deserializeA[x] : (a' : A') (k : x) |- (a : A[x])

proc d'k <- serializeD[x] d =
  case d ( L =>                               % (d : D[A[x]]) |- (d'k : D' * x)
                d'da <- serializeD[A[x]] d ;  % (d'da : D' * A[x]) |- (d'k : D' * x)
                d' <- recv d'da ;             % (d' : D') (d'da : A[x]) |- (d'k : D' * x)
                a'k <- serializeA[x] d'da ;   % (d' : D') (a'k : A' * x) |- (d'k : D' * x)
                a' <- recv a'k ;              % (d' : D') (a' : A') (a'k : x) |- (d'k : D' * x)
                l' <- L' d' a' ;              % (l' : D') (a'k : x) |- (d'k : D' * x)
                send d'k l' ; d'k <-> a'k
         | R =>                               % (d : x) |- (d'k : D' * x)
                r' <- R' ;                    % (r' : D') (d : x) |- (d'k : D' * x)
                send d'k r' ; d'k <-> d )

proc a'k <- serializeA[x] a =
  case a ( R =>                               % (a : x) |- (a'k : A' * x)
                r' <- R'_ ;                   % (r' : A') (a : x) |- (a'k : A' * x)
                send a'k r' ; a'k <-> a )

proc d <- deserializeD[x] d' k =
  case d' ( L' =>                                  % (d' : D' * A') (k : x) |- (d : D[x])
                  d'1 <- recv d' ;                 % (d'1 : D') (d' : A') (k : x) |- (d : D[x])
                  a <- deserializeA[x] d' k ;      % (d'1 : D') (a : A[x]) |- (d : D[x])
                  da <- deserializeD[A[x]] d'1 a ; % (da : D[A[x]]) |- (d : D[x])
                  d <- L[x] da
          | R' => wait d' ;                        % (k : x) |- (d : D[x])
                  d <- R[x] k )
proc a <- deserializeA[x] a' k =
  case a' ( R' => wait a' ;                        % (k : x) |- (a : A[x])
                  a <- R_[x] k )
