#test success
#options

%%% Balanced ternary representation of integers
%%% Because our index domains is natural numbers,
%%% each number has two indices, a and b, with the value
%%% being a-b.
%%% See ternary.rast for only nonnegative ternary numbers.

%%% We do not bother with disallowing leading zeros.
%%% tern{a}{b} = ternary numbers with value a-b

type tern{a}{b} =
  +{ m1 : ?c. ?d. ?{a+3*d+1 = 3*c+b}.   tern{c}{d},  % a-b = 3*(c-d)-1, so a+3*d+1 = 3*c+b
     z0 : ?c. ?d. ?{a+3*d   = 3*c+b}.   tern{c}{d},  % a-b = 3*(c-d)       a+3*d   = 3*c+b
     p1 : ?c. ?d. ?{a+3*d   = 3*c+b+1}. tern{c}{d},  % a-b = 3*(c-d)+1     a+3*d   = 3*d+b+1
      e : ?{a = b}. 1 }                              % a = b

decl zero : . |- (x : tern{0}{0})
proc x <- zero = x.e ; close x

decl one : . |- (x : tern{1}{0})
proc x <- one = x.p1 ; send x {0} ; send x {0} ; x.e ; close x

decl m_one : . |- (x : tern{0}{1})
proc x <- m_one = x.m1 ; send x {0} ; send x {0} ; x.e ; close x

% -(a-b) = b-a
decl neg{a}{b} : (x : tern{a}{b}) |- (y : tern{b}{a})
proc y <- neg{a}{b} x =
 case x ( m1 => {a'} <- recv x ; {b'} <- recv x ;
                y.p1 ;
                send y {b'} ; send y {a'} ;
                y <- neg{a'}{b'} x
        | z0 => {a'} <- recv x ; {b'} <- recv x ;
                y.z0 ; send y {b'} ; send y {a'} ;
                y <- neg{a'}{b'} x
        | p1 => {a'} <- recv x ; {b'} <- recv x ;
                y.m1 ; send y {b'} ; send y {a'} ;
                y <- neg{a'}{b'} x
        | e => wait x ;
               y.e ; close y )

decl succ{a}{b} : (x : tern{a}{b}) |- (y : tern{a+1}{b})
proc y <- succ{a}{b} x =
  case x ( m1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.z0 ; send y {a'} ; send y {b'} ;
                 y <-> x
         | z0 => {a'} <- recv x ; {b'} <- recv x ;
                 y.p1 ; send y {a'} ; send y {b'} ;
                 y <-> x
         | p1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.m1 ; send y {a'+1} ; send y {b'} ;
                 y <- succ{a'}{b'} x
         | e => y.p1 ; send y {0} ; send y {0} ;
                y.e ; wait x ; close y )

decl pred{a}{b} : (x : tern{a}{b}) |- (y : tern{a}{b+1})
proc y <- pred{a}{b} x =
  case x ( m1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.p1 ; send y {a'} ; send y {b'+1} ;
                 y <- pred{a'}{b'} x
         | z0 => {a'} <- recv x ; {b'} <- recv x ;
                 y.m1 ; send y {a'} ; send y {b'} ;
                 y <-> x
         | p1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.z0 ; send y {a'} ; send y {b'} ;
                 y <-> x
         | e => y.m1 ; send y {0} ; send y {0} ;
                y.e ; wait x ; close y
         )

%%% This would be easier to write with processes
%%% triple_m1, triple_z0, and triple_p1 but we output
%%% the ternary bits directly, for stylistic variety.
%%% Crib sheet:
(* 
  2*(3n-1) = 3(2*n)-2 = 3(2*n-1)+1
  2*(3n+0) = 3(2*n)+0
  2*(3n+1) = 3(2*n)+2 = 3(2*n+1)-1
*)

decl dbl{a}{b} : (x : tern{a}{b}) |- (y : tern{2*a}{2*b})
proc y <- dbl{a}{b} x =
  case x ( m1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.p1 ; send y {2*a'} ; send y {2*b'+1} ;
                 z <- dbl{a'}{b'} x ;
                 y <- pred{2*a'}{2*b'} z
         | z0 => {a'} <- recv x ; {b'} <- recv x ;
                 y.z0 ; send y {2*a'} ; send y {2*b'} ;
                 y <- dbl{a'}{b'} x
         | p1 => {a'} <- recv x ; {b'} <- recv x ;
                 y.m1 ; send y {2*a'+1} ;send y {2*b'} ;
                 z <- dbl{a'}{b'} x ;
                 y <- succ{2*a'}{2*b'} z
         | e => wait x ;
                y.e ; close y )

%%% from arith.ss
%---------------
type bin{n} = +{ b0 : ?{n > 0}. ?k. ?{n = 2*k}. bin{k},
                 b1 : ?{n > 0}. ?k. ?{n = 2*k+1}. bin{k},  % n > 0 is redundant here
                 e : ?{n = 0}. 1 }

decl zero_bin : . |- (x : bin{0})
decl succ_bin{n} : (x : bin{n}) |- (y : bin{n+1})

proc x <- zero_bin = x.e ; close x

proc y <- succ_bin{n} x =
  case x ( b0 => {n'} <- recv x ;
                 y.b1 ; send y {n'} ;
                 y <-> x
         | b1 => {n'} <- recv x ;
                 y.b0 ; send y {n'+1} ;
                 y <- succ_bin{n'} x
         | e => y.b1 ; send y {0} ;
                y.e ; wait x ; close y )

%%% Building numbers without leading zeros
decl dbl0{n} : (x : bin{n}) |- (y : bin{2*n})
decl dbl1{n} : (x : bin{n}) |- (y : bin{2*n+1})

proc y <- dbl0{n} x =
  case x ( b0 => {n'} <- recv x ;
                 y.b0 ; send y {n} ;
                 y.b0 ; send y {n'} ;
                 y <-> x
         | b1 => {n'} <- recv x ;
                 y.b0 ; send y {n} ;
                 y.b1 ; send y {n'} ;
                 y <-> x
         | e => y.e ; wait x ; close y )

proc y <- dbl1{n} x =
  y.b1 ; send y {n} ;
  y <-> x

%%% Predecessor defined only on strictly positive numbers
%%% It would be simpler to say (x : bin{n+1}) |- (y : bin{n}).
%%% We chose this formulation for stylistic variety

decl pred_bin{n|n > 0} : (x : bin{n}) |- (y : bin{n-1})
proc y <- pred_bin{n} x =
  case x ( b0 => {n'} <- recv x ;    % 2*k-1 = 2*(k-1)+1
                 y.b1 ; send y {n'-1} ;
                 y <- pred_bin{n'} x
         | b1 => {n'} <- recv x ;
                 y <- dbl0{n'} x  % 2*k+1-1 = 2*k
         % no case for e
         )
%---------------
%%% end from arith.ss

% 3*(2n+0) = 6*n   = 2(3*n)+0
% 3*(2n+1) = 6*n+3 = 2((3*n)+1)+1
% 3*0 = 0
decl times3{n} : (x : bin{n}) |- (y : bin{3*n})
proc y <- times3{n} x =
  case x ( b0 => {n'} <- recv x ;
                 z <- times3{n'} x ;
                 y <- dbl0{3*n'} z
         | b1 => {n'} <- recv x ;
                 z <- times3{n'} x ;
                 w <- succ_bin{3*n'} z ;
                 y <- dbl1{3*n'+1} w
         | e => wait x ;
                y <- zero_bin
         )

decl tern2bin{a}{b|a >= b} : (x : tern{a}{b}) |- (y : bin{a-b})
proc y <- tern2bin{a}{b} x =
  case x ( m1 => {a'} <- recv x ; {b'} <- recv x ;
                 z <- tern2bin{a'}{b'} x ;
                 w <- times3{a'-b'} z ;
                 y <- pred_bin{3*(a'-b')} w
         | z0 => {a'} <- recv x ; {b'} <- recv x ;
                 z <- tern2bin{a'}{b'} x ;
                 y <- times3{a'-b'} z
         | p1 => {a'} <- recv x ; {b'} <- recv x ;
                 z <- tern2bin{a'}{b'} x ;
                 w <- times3{a'-b'} z ;
                 y <- succ_bin{3*(a'-b')} w
         | e => wait x ;
                y <- zero_bin
         )

decl bin2tern{n} : (x : bin{n}) |- (y : tern{n}{0})
proc y <- bin2tern{n} x =
  case x ( b0 => {k} <- recv x ;
                 z <- bin2tern{k} x ;
                 y <- dbl{k}{0} z
         | b1 => {k} <- recv x ;
                 z <- bin2tern{k} x ;
                 w <- dbl{k}{0} z ;
                 y <- succ{2*k}{0} w
         | e => wait x ;
                y <- zero
         )

%%% from arith.rast

decl b271 : . |- (x : bin{271})
proc x <- b271 =
  x.b1 ; send x {135} ;
  x.b1 ; send x {67} ;
  x.b1 ; send x {33} ;
  x.b1 ; send x {16} ;
  x.b0 ; send x {8} ;
  x.b0 ; send x {4} ;
  x.b0 ; send x {2} ;
  x.b0 ; send x {1} ;
  x.b1 ; send x {0} ;
  x.e ; close x

decl t271 : . |- (y : tern{274}{3})
proc y <- t271 =
  x <- b271 ;
  y <- bin2tern{271} x

exec t271

decl t269 : . |- (y : tern{300}{31})
proc y <- t269 =
  x <- t271 ;
  x <- pred{272}{1} x ;
  x <- pred{270}{0} x ;
  y <-> x

exec t269
