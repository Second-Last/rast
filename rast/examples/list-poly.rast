#test success
#options --syntax=implicit

%%% Lists, indexed by their size.  See list-work.rast for
%%% analysis of work using potentials
%%% Since polymorphism isn't currently
%%% supported, we just have lists of natural numbers
%%% but all code is parametric in this choice
%%%
%%% Examples:
%%%
%%% append, reverse, alternate, split
%%% map, fold, filter
%%% stack as a list, stack as a chain
%%% queue as two lists, queue as a bucket brigade

%%% Run this with -v (--verbose) to see the values
%%% in the lists resulting from evaluation

type list[A]{n} = +{ cons : ?{n > 0}. A * list[A]{n-1},
                     nil : ?{n = 0}. 1 }

decl nil[A] : . |- (l : list[A]{0})
proc l <- nil[A] = l.nil ; close l

decl cons[A]{n} : (x : A) (t : list[A]{n}) |- (l : list[A]{n+1})
proc l <- cons[A]{n} x t = l.cons ; send l x ; l <-> t

%%% append
decl append[A]{n}{k} : (l1 : list[A]{n}) (l2 : list[A]{k}) |- (l : list[A]{n+k})
proc l <- append[A]{n}{k} l1 l2 =
  case l1 ( cons => x <- recv l1 ;
                    l.cons ; send l x ;
                    l <- append[A]{n-1}{k} l1 l2
          | nil => wait l1 ; l <-> l2 )

%%% Version of append where all lists have the same
%%% potential and we pay the cost up front, externally
decl append'[A]{n}{k} : (l1 : list[A]{n}) (l2 : list[A]{k}) |- (l : list[A]{n+k})
proc l <- append'[A]{n}{k} l1 l2 =
  case l1 ( cons => x <- recv l1 ;
                    l.cons ; send l x ;
                    l <- append'[A]{n-1}{k} l1 l2
          | nil => wait l1 ; l <-> l2 )

%%% reverse
decl rev[A]{n}{k} : (l : list[A]{n}) (a : list[A]{k}) |- (r : list[A]{n+k})
proc r <- rev[A]{n}{k} l a =
  case l ( cons => x <- recv l ;
                   a' <- cons[A]{k} x a ;
                   r <- rev[A]{n-1}{k+1} l a'
         | nil => wait l ; r <-> a )

decl reverse[A]{n} : (l : list[A]{n}) |- (r : list[A]{n})
proc r <- reverse[A]{n} l =
  a <- nil[A] ;
  r <- rev[A]{n}{0} l a

%%% Split a list into: one with the even elements and one with the odd ones
%%% This example illustrates that cases that are impossible, according to the
%%% type, are reconstructed
decl split[A]{n} : (l : list[A]{2*n}) |- (l12 : list[A]{n} * list[A]{n} * 1)
decl split'[A]{n} : (l : list[A]{2*n+1}) |- (l12 : list[A]{n} * list[A]{n+1} * 1)

proc l12 <- split[A]{n} l =
  case l ( cons => x <- recv l ;
                   l12' <- split'[A]{n-1} l ;
                   l1' <- recv l12' ; l2' <- recv l12' ; wait l12' ;
                   l1 <- cons[A]{n-1} x l1' ;
                   send l12 l1 ; send l12 l2' ; close l12
         | nil => wait l ;
                  l1 <- nil[A] ; send l12 l1 ;
                  l2 <- nil[A] ; send l12 l2 ; close l12 )
proc l12 <- split'[A]{n} l =                   
  case l ( cons => x <- recv l ;
                   l12' <- split[A]{n} l ;
                   l1' <- recv l12' ; l2' <- recv l12' ; wait l12' ;
                   l2 <- cons[A]{n} x l2' ;
                   send l12 l1' ; send l12 l2 ; close l12
         % no nil case
         )

%%% Alternating elements of two lists 
decl alternate[A]{m}{n} : (l1 : list[A]{m}) (l2 : list[A]{n}) |- (l : list[A]{m+n})
proc l <- alternate[A]{m}{n} l1 l2 =
  case l1 ( cons => x <- recv l1 ;
                    l.cons ; send l x ;
                    l <- alternate[A]{n}{m-1} l2 l1
          | nil => wait l1 ;
                   l <-> l2 )

%%% map
%%% Due to linearity, this is implemented using a mapper
%%% process of recursive type.  However, the type for map
%%% requires some nonlinear constraints
type mapper[A][B] = &{ next : A -o B * mapper[A][B],
                       done : 1 }

decl map[A][B]{n} : (k : list[A]{n}) (m : mapper[A][B]) |- (l : list[B]{n})

proc l <- map[A][B]{n} k m =
  case k ( cons => x <- recv k ;
                   m.next ; send m x ;
                   y <- recv m ;
                   l.cons ; send l y ;
                   l <- map[A][B]{n-1} k m
         | nil => wait k ;
                  m.done ; wait m ;
                  l.nil ; close l )

%%% fold
%%% Due to linearity, this is implemented using a folder
%%% process of recursive type
type folder[A][B] = &{ next : A -o B -o B * folder[A][B],
                       done : 1 }

decl fold[A][B]{n} :  (f : folder[A][B]) (k : list[A]{n}) (y : B) |- (r : B)
proc r <- fold[A][B]{n} f k y =
  case k ( cons => x <- recv k ;
                   f.next ; send f x ; send f y ; 
                   y' <- recv f ;
                   r <- fold[A][B]{n-1} f k y'
         | nil => wait k ;                   
                  f.done ; wait f ;
                  r <-> y )

%%% filter
%%% Due to linearity, this is implemented using a selector process
%%% of recursive type which returns the element it is given to test.

type selector[A] = &{ next : A -o +{ false : selector[A], true : A * selector[A] },
                      done : 1 }

%%% This example illustrates one way to deal with lists of uncertain
%%% length, here bounded by the length of the input list

%%% bdd_list[A]{n} is a list of some length m <= n
%%% The nil, cons, and resize operations could be expanded in-line, but
%%% we separate them out to isolate them.
type bdd_list[A]{n} = ?m. ?{m <= n}. list[A]{m}

decl bdd_nil[A] : . |- (l : bdd_list[A]{0})
proc l <- bdd_nil[A] = send l {0} ; l.nil ; close l

decl bdd_cons[A]{n} : (x : A) (k : bdd_list[A]{n}) |- (l : bdd_list[A]{n+1})
proc l <- bdd_cons[A]{n} x k =
  {m} <- recv k ;
  send l {m+1} ;
  l.cons ; send l x ; l <-> k

decl bdd_resize[A]{n} : (k : bdd_list[A]{n}) |- (l : bdd_list[A]{n+1})
proc l <- bdd_resize[A]{n} k =
  {m} <- recv k ;
  send l {m} ;
  l <-> k

decl filter[A]{n} : (s : selector[A]) (k : list[A]{n}) |- (l : bdd_list[A]{n})
proc l <- filter[A]{n} s k =
  case k ( cons => x <- recv k ;
                   s.next ; send s x ;
                   case s ( false => l' <- filter[A]{n-1} s k ;
                                     l <- bdd_resize[A]{n-1} l'
                          | true => x' <- recv s ;
                                    l' <- filter[A]{n-1} s k ;
                                    l <- bdd_cons[A]{n-1} x' l' )
          | nil => wait k ; s.done ; wait s ;
                   l <- bdd_nil[A] )

%%% Stack data structure
%%% Prepay for pop during push operation
type stack[A]{n} = &{ push : A -o stack[A]{n+1},
                   pop : +{ none : ?{n = 0}. 1,
                            some : ?{n > 0}. A * stack[A]{n-1} } }

%%% Stack implemented as a list where each element
%%% has potential 2 as needed for the pop operation
decl stack_list[A]{n} : (l : list[A]{n}) |- (s : stack[A]{n})
proc s <- stack_list[A]{n} l =
  case s ( push => x <- recv s ;
                   l' <- cons[A]{n} x l ;
                   s <- stack_list[A]{n+1} l'
         | pop => case l ( cons => s.some ;
                                   x <- recv l ;
                                   send s x ;
                                   s <- stack_list[A]{n-1} l
                         | nil => s.none ; wait l ;
                                  close s ) )

decl stack_new[A]{n} : . |- (s : stack[A]{0})
proc s <- stack_new[A]{n} =
  l0 <- nil[A] ;
  s <- stack_list[A]{0} l0

%%% Stack as a chain of elements
decl bot[A] : . |- (s : stack[A]{0})
decl top[A]{n} : (x : A) (t : stack[A]{n}) |- (s : stack[A]{n+1})

proc s <- bot[A] =
  case s ( push => x <- recv s ;
                   e <- bot[A] ;
                   s <- top[A]{0} x e
         | pop => s.none ; close s )

proc s <- top[A]{n} x t =
  case s ( push => y <- recv s ;
                   t' <- top[A]{n} x t ;
                   s <- top[A]{n+1} y t'
         | pop => s.some ; send s x ;
                  s <-> t )

%%% Queue data structure
%%% First version using two lists, with constant amortized
%%% cost for for enqueue and dequeue operations

type queue[A]{n} = &{ enq : A -o queue[A]{n+1},
                      deq : deq_reply[A]{n} }
type deq_reply[A]{n} = +{ none : ?{n = 0}. 1,
                          some : ?{n > 0}. A * queue[A]{n-1} }

decl queue_lists[A]{n1}{n2} : (in : list[A]{n1}) (out : list[A]{n2}) |- (q : queue[A]{n1+n2})
decl queue_rev[A]{n1} : (in : list[A]{n1}) |- (q : deq_reply[A]{n1})

proc q <- queue_lists[A]{n1}{n2} in out =
  case q ( enq => x <- recv q ;
                  in' <- cons[A]{n1} x in ;
                  q <- queue_lists[A]{n1+1}{n2} in' out
         | deq => case out ( cons => x <- recv out ;
                                     q.some ; send q x ;
                                     q <- queue_lists[A]{n1}{n2-1} in out
                           | nil => wait out ;
                                    q <- queue_rev[A]{n1} in ) )

proc q <- queue_rev[A]{n1} in =
  out <- reverse[A]{n1} in ;
  case out ( cons => x <- recv out ;
                     q.some ; send q x ;
                     in0 <- nil[A] ;
                     q <- queue_lists[A]{0}{n1-1} in0 out
           | nil => wait out ;
                    q.none ; close q )

decl queue_new[A] : . |- (q : queue[A]{0})
proc q <- queue_new[A] =
  in0 <- nil[A] ;
  out0 <- nil[A] ;
  q <- queue_lists[A]{0}{0} in0 out0


%%% Queue as a bucket brigade
%%% The cost of enq here cannot be amortized

type queue'[A]{n} = &{ enq : A -o queue'[A]{n+1},
                    deq : +{ none : ?{n = 0}. 1,
                             some : ?{n > 0}. A * queue'[A]{n-1} } }

decl back[A] : . |- (q : queue'[A]{0})
decl front[A]{n} : (x : A) (r : queue'[A]{n}) |- (q : queue'[A]{n+1})

proc q <- back[A] =
  case q ( enq => x <- recv q ;
                  b <- back[A] ;
                  q <- front[A]{0} x b
         | deq => q.none ; close q )

proc q <- front[A]{n} x r =
  case q ( enq => y <- recv q ;
                  r.enq ; send r y ;
                  q <- front[A]{n+1} x r
         | deq => q.some ; send q x ;
                  q <-> r )

%%% Examples

%%% natural numbers as "generic" list elements
% type nat = +{zero : 1, succ : nat}
type nat = ?k. 1

decl the{k} : . |- (n : nat)
proc n <- the{k} = send n {k} ; close n

decl list123 : . |- (l : list[nat]{3})
proc l <- list123 =
  k1 <- the{1} ;
  k2 <- the{2} ;
  k3 <- the{3} ;
  l.cons ; send l k1 ; 
  l.cons ; send l k2 ;
  l.cons ; send l k3 ;
  l.nil ; close l

decl list45 : . |- (l : list[nat]{2})
proc l <- list45 =
  k4 <- the{4} ;
  k5 <- the{5} ;
  l.cons ; send l k4 ; l.cons ; send l k5 ;
  l.nil ; close l

decl list12345_2 : . |- (l : list[nat]{5})
proc l <- list12345_2 =
  l1 <- list123 ;
  l2 <- list45 ;
  l <- append[nat]{3}{2} l1 l2

decl list54321_0 : . |- (l : list[nat]{5})
proc l <- list54321_0 =
  l1 <- list12345_2 ;
  l <- reverse[nat]{5} l1

decl split54321_0 : . |- (ll : list[nat]{2} * list[nat]{3} * 1)
proc ll <- split54321_0 =
  l_0 <- list54321_0 ;
  ll <- split'[nat]{2} l_0

decl alt45231_0 : . |- (l : list[nat]{5})
proc l <- alt45231_0 =
  ll <- split54321_0 ;
  l1 <- recv ll ; l2 <- recv ll ; wait ll ;
  l <- alternate[nat]{2}{3} l1 l2

decl m_plus1 : . |- (m : mapper[nat][nat])
proc m <- m_plus1 =
  case m ( next => x <- recv m ;
                   {k} <- recv x ; wait x ;
                   y <- the{k+1} ;
                   send m y ;
                   m <- m_plus1
         | done => close m )

decl map56342_0 : . |- (l : list[nat]{5})
proc l <- map56342_0 =
  l_0 <- alt45231_0 ;
  m <- m_plus1 ;
  l <- map[nat][nat]{5} l_0 m

exec list12345_2
exec list54321_0
exec split54321_0
exec alt45231_0
exec map56342_0

%%% Currently no examples for fold, filter, stacks, or queues
