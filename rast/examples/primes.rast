#test success
#options --work=none --time=none --syntax=implicit

%%% Prime sieve
%%%
%%% Produces a stream of bits, one for each number up to
%%% a given limit, where the bit indicates if this number is
%%% prime or composite
%%%
%%% Indices track the length of the bit stream and various
%%% natural number values (but not primality, of course)

type nat{n} = +{succ : ?{n > 0}. nat{n-1},
                zero : ?{n = 0}. 1}

%%% Natural numbers in unary representation
%%% Copied (with some renaming) from binarith.ss

decl zero : . |- (x : nat{0})
decl succ{n} : (x : nat{n}) |- (y : nat{n+1})

proc x <- zero = x.zero ; close x
proc y <- succ{n} x = y.succ ; y <-> x

%--------------------
decl drop{n} : (x : nat{n}) |- (u : 1)
decl dup{n} : (x : nat{n}) |- (xx : nat{n} * nat{n} * 1)

proc u <- drop{n} x =
  case x ( succ => u <- drop{n-1} x
         | zero => wait x ; close u )

proc xx <- dup{n} x =
  case x ( succ => yy <- dup{n-1} x ;
                   y1 <- recv yy ; y2 <- recv yy ; wait yy ;
                   x1 <- succ{n-1} y1 ; send xx x1 ;
                   x2 <- succ{n-1} y2 ; send xx x2 ;
                   close xx
         | zero => wait x ;
                   x1 <- zero ; send xx x1 ;
                   x2 <- zero ; send xx x2 ;
                   close xx )

%%% Streams of bits, indexed by their length.
%%% Bits are 'prime' (this number in sequence is prime)
%%% or 'composite' (this number is composite)

type stream{k} = +{prime : ?{k > 0}. stream{k-1},
                   composite : ?{k > 0}. stream{k-1},
                   end : ?{k = 0}. 1}

%%% filter{k}{n1}{n2}{n} where n = n1+n2
%%% is a stream transducer from stream t to stream s, both of length k.
%%% It marks every n'th number in the stream t
%%% as being composite, starting after n1 numbers.

decl filter{k}{n1}{n2}{n|n = n1+n2}
    : (t : stream{k}) (c : nat{n1}) (d : nat{n2}) |- (s : stream{k})
proc s <- filter{k}{n1}{n2}{n} t c d =
  case t ( prime => case c ( succ => s.prime ; % not divisible by n
                             d' <- succ{n2} d ;
                             s <- filter{k-1}{n1-1}{n2+1}{n} t c d'
                           | zero => wait c ; % divisible by n: not prime
                             s.composite ;
                             z <- zero ;
                             s <- filter{k-1}{n2}{0}{n} t d z ) % cyclic loop
         | composite => s.composite ;  % already composite
                        case c ( succ => d' <- succ{n2} d ;
                                         s <- filter{k-1}{n1-1}{n2+1}{n} t c d'
                               | zero => wait c ;
                                 z <- zero ;
                                 s <- filter{k-1}{n2}{0}{n} t d z )
         | end => wait t ;
                  u <- drop{n1} c ; wait u ;
                  u <- drop{n2} d ; wait u ;
                  s.end ; close s )

%%% head{k}{n}{kn} where kn = k+n
%%% is a transducer from stream t to stream s, both of length k.
%%% It marks the first number (which represents n) as prime and
%%% sets up a filter for multiples of n as being composite

decl head{k}{n}{kn|kn = k+n} : (t : stream{k}) (x : nat{n}) |- (s : stream{k})
proc s <- head{k}{n}{kn} t x =
  case t ( prime => s.prime ; % not divisible: new prime
                    z <- zero ;
                    xx <- dup{n} x ;
                    x1 <- recv xx ; x2 <- recv xx ; wait xx ;
                    f <- filter{k-1}{n}{0}{n} t x1 z ;
                    x' <- succ{n} x2 ;
                    s <- head{k-1}{n+1}{kn} f x'
         | composite => s.composite ;
                        x' <- succ{n} x ;
                        s <- head{k-1}{n+1}{kn} t x'
         | end => wait t ;
                  u <- drop{n} x ; wait u ;
                  s.end ; close s )

%%% candidates{n} produces a stream of n candidates, each of
%%% which is a potential prime.

decl candidates{n} : (x : nat{n}) |- (s : stream{n})
proc s <- candidates{n} x =
  case x ( succ => s.prime ;
                   s <- candidates{n-1} x
         | zero => wait x ;
                   s.end ; close s )

%%% primes{n} produces a stream of n bits, where the
%%% first one represents the number 2 (and therefore
%%% has value 1, to set up the cyclic counter for it).

decl primes{n} : (x : nat{n}) |- (s : stream{n})
proc s <- primes{n} x =
  t <- candidates{n} x ;
  c0 <- zero ;
  c1 <- succ{0} c0 ; % first position is 2, not 1
  s <- head{n}{1}{n+1} t c1

%%% Simple examples

decl double{n} : (x : nat{n}) |- (y : nat{2*n})
proc y <- double{n} x =
  case x ( succ => y.succ ; y.succ ;
                   y <- double{n-1} x
         | zero => y.zero ; wait x ; close y
         )

decl n256 : . |- (x : nat{256})
proc x <- n256 =
  y <- zero ; y <- succ{0} y ; y <- double{1} y ;
  y <- double{2} y ; y <- double{4} y ; y <- double{8}  y ; y <- double{16}  y ;
  y <- double{32} y ; y <- double{64}  y ; y <- double{128}  y ;
  x <-> y

%%% Classification of numbers 2, 3, 4, ..., 257
decl primes256 : . |- (s : stream{256})
proc s <- primes256 =
  x <- n256 ;
  s <- primes{256} x

exec primes256
