signature RECON =
sig

    (* recon env A P C ext = P', where P' is reconstruction with A |- P' : C
     * may raise ErrorMsg.Error
     *)
    val recon : Ast.env -> Arith.ctx -> Arith.prop -> Ast.tp -> Ast.exp -> Ast.tp -> Ast.ext -> Ast.exp

    val wrecon : Ast.env -> Ast.tp -> Ast.pot -> Ast.exp -> Ast.tp -> Ast.ext -> Ast.exp

end

structure Recon :> RECON =
struct

structure R = Arith
structure RP = R.Print
structure A = Ast
structure P = Ast.Print
structure PP = PPrint
structure C = Constraints
structure TC = TypeCheck
val ERROR = ErrorMsg.ERROR

exception NotSub of A.tp * A.tp

fun strip_next0 ctx con (A as A.Next(t,A')) =
    if C.entails ctx con (R.Eq(t,R.Int(0)))
    then strip_next0 ctx con A'
    else A
  | strip_next0 ctx con A = A

fun sub env ctx con A B =
    if TC.eq_tp env ctx con A B then A.Id
    else
      (case (TC.structural env (strip_next0 ctx con A), TC.structural env (strip_next0 ctx con B))
        of (true, true) => (* rule refl *)
                     raise NotSub(A,B) (* already know that the types are not equal *)
         | (_, _) => sub_temporal env ctx con (strip_next0 ctx con (TC.expand env 1 A)) (strip_next0 ctx con (TC.expand env 1 B)))
and (* A.Next rules *)
    sub_temporal env ctx con (A' as A.Next(s,A)) (B' as A.Next(t,B)) = (* rule ()() *)
    if C.entails ctx con (R.Ge(s,t))
    then
      let val P = sub env ctx con (A.Next(R.minus(s,t),A)) B
      in A.Delay(t,P) end
    else if C.entails ctx con (R.Ge(t,s))
    then
      let val P = sub env ctx con A (A.Next(R.minus(t,s),B))
      in A.Delay(s,P) end
    else raise NotSub(A',B')
  | sub_temporal env ctx con (A.Next(s,A)) (A.Dia(B)) = (* rule ()<> *)
    let val P = sub env ctx con A (A.Dia(B))
    in A.Delay(s,P) end
  | sub_temporal env ctx con (A.Box(A)) (A.Next(t,B)) = (* rule []() *)
    let val P = sub env ctx con (A.Box(A)) B
    in A.Delay(t,P) end
  (* Invertible rules *)
  | sub_temporal env ctx con A (A.Box(B)) = (* rule []R *)
    if TC.eventually_box env A
    then let val P = sub_temporal env ctx con A B (* A is eventually box *)
         in A.WhenR(P) end
    else raise NotSub(A, A.Box(B))      (* by lemma 6.2(i) *)
  | sub_temporal env ctx con (A.Dia(A)) B = (* rule <>L *)
    if TC.eventually_dia env B
    then let val P = sub_temporal env ctx con A B (* B is eventually dia *)
         in A.WhenL(P) end
    else raise NotSub(A.Dia(A), B)  (* by lemma 6.2(ii) *)
  (* Noninvertible rules *)
  | sub_temporal env ctx con (A.Box(A)) B = (* rule []L *)
    let val P = sub env ctx con A B
    in A.NowL(P) end
  | sub_temporal env ctx con A (A.Dia(B)) = (* rule <>R *)
    let val P = sub env ctx con A B
    in A.NowR(P) end
  (* either A or B is temporal *)
  | sub_temporal env ctx con A B =
    raise NotSub(A,B)

fun maybe_sub env ctx con A B =
    SOME(sub env ctx con A B)
    handle NotSub _ => NONE

(* begin copied from typecheck.sml *)
fun error_implicit (P, ext) =
    ERROR ext ("not allowed in implicit syntax")

fun error_label_mismatch (l, l', ext) =
    ERROR ext ("label " ^ l ^ " is different from " ^ l' ^ "\n"
               ^ "[Hint: the order of branches must follow the order of the alternatives the type]")
fun error_label_missing_branch (l, ext) =
    ERROR ext ("label " ^ l ^ " does not appear among the branches")
fun error_label_missing_alt (l, ext) =
    ERROR ext ("label " ^ l ^ " does not appear among the alternatives in the type")

fun error_label_invalid env (l, A, ext) =
    ERROR ext ("label " ^ l ^ " not a valid alternative in type " ^ PP.pp_tp_short env A)
(* end copied from typecheck.sml *)

datatype dir = Left | Right
fun interacts P = case P of
    A.LabR _ => Right | A.CaseR _ => Right | A.CloseR => Right
    (* WhenR, NowR, PayR, GetR, assumeR, assertR, impossibleR not allowed *)
  | A.LabL _ => Left | A.CaseL _ => Left | A.WaitL _ => Left
    (* WhenL, NowL, PayL, GetL, assumeL, assertL, impossibleL not allowed *)
  | A.Marked(marked_exp) => interacts (Mark.data marked_exp)
    (* Cut, Id, ExpName not allowed *)

fun expd_exists_tp env (A as A.TpName(a,es)) =
  (case A.expd_tp env (a,es) of
    A.Exists(phi,A') => A.Exists(phi,A')
  | _ => A)
  | expd_exists_tp env A = A

fun expd_forall_tp env (A as A.TpName(a,es)) =
  (case A.expd_tp env (a,es) of
    A.Forall(phi,A') => A.Forall(phi,A')
  | _ => A)
  | expd_forall_tp env A = A


fun impossL_branch env (l,A.Exists(phi,A')) l' ext' = (l, NONE, A.ImpossL(phi))
  | impossL_branch env (l,A.TpName(a,es)) l' ext' = impossL_branch env (l,A.expd_tp env (a,es)) l' ext'
  | impossL_branch env (l,A) l' ext' = error_label_mismatch (l, l', ext')

fun impossR_branch env (l,A.Forall(phi,C')) l' ext' = (l, NONE, A.ImpossR(phi))
  | impossR_branch env (l,A.TpName(a,es)) l' ext' = impossR_branch env (l,A.expd_tp env (a,es)) l' ext'
  | impossR_branch env (l,C) l' ext' = error_label_mismatch (l, l', ext')
                          
(* recon env A P C = SOME(P')
 * adds delay, when, and now to P to A |- P : C
 * raises an exception when impossible
 * also strips source extents from the expression
 * so the result is ready for execution
 *)
fun recon' env ctx con A P C ext =
  let val Astr = strip_next0 ctx con A
      val Cstr = strip_next0 ctx con C
      val Aexp = expd_exists_tp env Astr
      val Cexp = expd_forall_tp env Cstr
  in recon env ctx con Aexp P Cexp ext end


and recon env ctx con (A.Exists(phi,A')) P C ext =
    if C.contradictory ctx con phi
    then
      ERROR ext ("contradictory constraint " ^ C.pp_junsat con phi)
    else
      A.AssumeL(phi, recon' env ctx (R.And(con,phi)) A' P C ext)
  | recon env ctx con A P (A.Forall(phi,C')) ext =
    if C.contradictory ctx con phi
    then
      ERROR ext ("contradictory constraint " ^ C.pp_junsat con phi)
    else
      A.AssumeR(phi, recon' env ctx (R.And(con,phi)) A P C' ext)
  | recon env ctx con A (A.Id) C ext =
    (case maybe_sub env ctx con A C
      of SOME(P) => P
       | NONE => ERROR ext (PP.pp_tp_short env A ^ " not subtype of " ^ PP.pp_tp_short env C))
  | recon env ctx con A (A.Cut(P,pot,B,Q)) C ext =
    (* only heuristic... *)
    let val P' = recon' env ctx con A P B ext
        val Q' = recon' env ctx con B Q C ext
    in A.Cut(P',pot,B,Q') end
  | recon env ctx con A (A.Spawn(P,Q)) C ext =
    recon env ctx con A (TC.syn_cut env (P,Q) ext) C ext
  (* begin cases for each action matching their type *)
  | recon env ctx con A (A.LabR(k,P)) (C as A.Plus(choices)) ext =
    (case A.lookup_choice choices k
      of SOME(Ck) => A.LabR(k, recon' env ctx con A P Ck ext)
       | NONE => error_label_invalid env (k, C, ext))
  | recon env ctx con A (A.CaseR(branches)) (A.With(choices)) ext =
    let val branches' = recon_branchesR env ctx con A branches choices ext
    in A.CaseR(branches') end
  | recon env ctx con (A.Dot) (A.CloseR) (A.One) ext =
    A.CloseR
  | recon env ctx con (A as A.With(choices)) (A.LabL(k,Q)) C ext =
    (case A.lookup_choice choices k
      of SOME(Ak) => A.LabL(k, recon' env ctx con Ak Q C ext)
       | NONE => error_label_invalid env (k, A, ext))
  | recon env ctx con (A.Plus(choices)) (A.CaseL(branches)) C ext =
    let val branches' = recon_branchesL env ctx con choices branches C ext
    in A.CaseL(branches') end
  | recon env ctx con (A.One) (A.WaitL(Q)) C ext =
    let val Q' = recon' env ctx con A.Dot Q C ext
    in A.WaitL(Q') end
  (* process definitions *)
  (* just a heuristic --- this is incomplete *)
  | recon env ctx con A (P as A.ExpName(f,es)) C ext =
    (case (A.expd_expdec env (f,es), A.lookup_expdec env f)
      of (SOME(A',_,C'), SOME _) =>
         let val ev_box = TC.eventually_box env A
             val PLopt = maybe_sub env ctx con A A'
             val PRopt = maybe_sub env ctx con C' C
             val ev_dia = TC.eventually_dia env C
             val Aexpd = strip_next0 ctx con (TC.expand env 1 A)
             val Cexpd = strip_next0 ctx con (TC.expand env 1 C)
         in
             recon_call env ctx con ev_box Aexpd PLopt (strip_next0 ctx con A') P (strip_next0 ctx con C') PRopt Cexpd ev_dia ext
         end
       | (NONE, _) => ERROR ext ("process " ^ f ^ " undeclared")
       | (_, NONE) => ERROR ext ("process " ^ f ^ " undefined"))
  (* delay, which is allowed before reconstruction *)
  | recon env ctx con A (A.Delay(t,P)) C ext =
    let val P' = recon' env ctx con (TC.decrementL env ctx con A t ext) P (TC.decrementR env ctx con C t ext) ext
    in A.Delay(t,P') end

  (* for now: should not be mixed with work reconstruction *)
  | recon env ctx con A (P as A.Work _) C ext = ERROR ext ("work cannot be mixed with time reconstruction")

  (* should not be allowed before reconstruction *)
  | recon env ctx con A (P as A.WhenR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.NowL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.WhenL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.NowR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.PayR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.PayL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.GetR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.GetL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.AssumeR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.ImpossR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.AssertL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.AssertR _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.AssumeL _) C ext = error_implicit (P,ext)
  | recon env ctx con A (P as A.ImpossL _) C ext = error_implicit (P,ext)

  | recon env A ctx con (A.Marked(marked_P)) C ext =
    recon env A ctx con (Mark.data marked_P) C (Mark.ext marked_P)

  (* remaining cases, where process attempts to interact, but
   * may not match the given type
   *)
  | recon env ctx con A P C ext =
    (case (A, interacts P, C)
      of (* interacting right *)
         (A, Right, A.Next(t,C)) => A.Delay(t,recon' env ctx con (TC.decrementL env ctx con A t ext) P C ext)
       | (A, Right, A.Dia(C)) => A.NowR(recon' env ctx con A P C ext)
       | (A, Right, A.Box(C)) =>
         let val () = if TC.eventually_box env A then ()
                      else ERROR ext (PP.pp_tp_short env A ^ " is not patient (ie, not (*)[]A)")
         in A.WhenR(recon' env ctx con A P C ext) end
       | (A, Right, A.Exists(phi,C)) => A.AssertR(phi, recon' env ctx (R.And(con,phi)) A P C ext)
       | (A, Right, A.TpName(c,es)) => recon' env ctx con A P (A.expd_tp env (c,es)) ext
       | (A, Right, C) => ERROR ext ("does not match right type " ^ PP.pp_tp_short env C)
        (* interacting left *)
       | (A.Next(s,A), Left, C) => A.Delay(s,recon' env ctx con A P (TC.decrementR env ctx con C s ext) ext)
       | (A.Box(A), Left, C) => A.NowL(recon' env ctx con A P C ext)
       | (A.Dia(A), Left, C) =>
         let val () = if TC.eventually_dia env C then ()
                      else ERROR ext (PP.pp_tp_short env C ^ " is not patient (ie, not (*)<>C)")
         in A.WhenL(recon' env ctx con A P C ext) end
       | (A.Forall(phi,A), Left, C) => A.AssertL(phi, recon' env ctx (R.And(con,phi)) A P C ext)
       | (A.TpName(a,es), Left, C) => recon' env ctx con (A.expd_tp env (a,es)) P C ext
       | (A, Left, C) => ERROR ext ("does not match left type " ^ PP.pp_tp_short env A))

and recon_branchesL env ctx con nil nil C ext = nil
  | recon_branchesL env ctx con ((l,A)::choices) ((l',ext',P)::branches) C ext =
    if l = l'
    then (l',ext',recon' env ctx con A P C ext)::(recon_branchesL env ctx con choices branches C ext)
    else (impossL_branch env (l,A) l' ext')::(recon_branchesL env ctx con choices ((l',ext',P)::branches) C ext)
  | recon_branchesL env ctx con ((l,A)::choices) nil C ext =
    (impossL_branch env (l,A) "<none>" ext)::(recon_branchesL env ctx con choices nil C ext)
  | recon_branchesL env ctx con nil ((l', ext', P)::_) C ext =
    error_label_missing_alt (l',ext')

and recon_branchesR env ctx con A nil nil ext = nil
  | recon_branchesR env ctx con A ((l,ext',P)::branches) ((l',C)::choices) ext =
    if l = l'
    then (l',ext',recon' env ctx con A P C ext)::(recon_branchesR env ctx con A branches choices ext)
    else (impossR_branch env (l',C) l ext')::(recon_branchesR env ctx con A ((l,ext',P)::branches) choices ext)
  | recon_branchesR env ctx con A ((l,ext',P)::_) nil ext = error_label_missing_alt (l, ext')
  | recon_branchesR env ctx con A nil ((l',C)::choices) ext =
    (impossR_branch env (l',C) "<none>" ext)::(recon_branchesR env ctx con A nil choices ext)

    (* first three cases are only there to make result more readable *)
    (* A and C must be expanded, cannot be type names *)
and recon_call env ctx con ev_box A (SOME(A.Id)) A' P C' (SOME(A.Id)) C ev_dia ext =
    (* A = A' and C' = C *)
    P
  | recon_call env ctx con ev_box A (SOME(A.Id)) A' P C' (SOME(PR)) C ev_dia ext =
    (* A = A' *)
    A.Cut(P,R.Int(0),C',PR)
  | recon_call env ctx con ev_box A (SOME(PL)) A' P C' (SOME(A.Id)) C ev_dia ext =
    (* C' = C *)
    A.Cut(PL,R.Int(0),A',P)
  | recon_call env ctx con ev_box A (SOME(PL)) A' P C' (SOME(PR)) C ev_dia ext =
    (* A <: A' and C' <: C *)
    A.Cut(PL,R.Int(0),A',A.Cut(P,R.Int(0),C',PR))
  | recon_call env ctx con ev_box (A.Next(s,A)) PLopt A' P C' PRopt (A.Next(t,C)) ev_dia ext =
    if C.entails ctx con (R.Ge(s,t))
    then
      let val P' = recon' env ctx con (A.Next(R.minus(s,t),A)) P C ext
      in A.Delay(t,P') end
    else if C.entails ctx con (R.Ge(t,s))
    then
      let val P' = recon' env ctx con A P (A.Next(R.minus(t,s),C)) ext
      in A.Delay(s,P') end
    else ERROR ext (C.pp_unrel con s t)
  | recon_call env ctx con true A PLopt A' P C' PRopt (A.Next(t,C)) ev_dia ext =
    (* A is eventually Box *)
    let val P' = recon' env ctx con (TC.decrementL env ctx con A t ext) P C ext
    in A.Delay(t,P') end
  | recon_call env ctx con true A PLopt A' P C' PRopt (A.Box(C)) ev_dia ext =
    (* A is eventually Box *)
    let val P' = recon' env ctx con A P C ext
    in A.WhenR(P') end
  | recon_call env ctx con ev_box (A.Next(s,A)) PLopt A' Q C' PRopt C true ext =
    (* C is eventually Dia *)
    let val Q' = recon' env ctx con A Q (TC.decrementR env ctx con C s ext) ext
    in A.Delay(s,Q') end
  | recon_call env ctx con ev_box (A.Dia(A)) PLopt A' Q C' PRopt C true ext =
    (* C is eventually Dia *)
    let val Q' = recon' env ctx con A Q C ext
    in A.WhenL(Q') end
  | recon_call env ctx con ev_box A PLopt A' P C' PRopt C ev_dia ext =
    ERROR ext ("call does not match " ^ PP.pp_tp_short env A ^ " |- " ^ PP.pp_tp_short env C)

fun create_work pot P = A.Work(pot,P)

fun wrecon_last env (A.TpName(a,es)) pot pot' P C ext =
    wrecon_last env (A.expd_tp env (a,es)) pot pot' P C ext
  | wrecon_last env A pot pot' P (A.TpName(a,es)) ext =
    wrecon_last env A pot pot' P (A.expd_tp env (a,es)) ext
  | wrecon_last env (A.GetPot(p,A')) pot pot' P C ext =
    A.PayL(p,wrecon_last env A' (R.minus (pot,p)) pot' P C ext)
  | wrecon_last env A pot pot' P (A.GetPot(p,C')) ext =
    A.GetR(p,wrecon_last env A (R.plus (pot,p)) pot' P C' ext)
  | wrecon_last env A pot pot' P (A.PayPot(p,C')) ext =
    A.PayR(p,wrecon_last env A (R.minus (pot,p)) pot' P C' ext)
  | wrecon_last env (A.PayPot(p,A')) pot pot' P C ext =
    A.GetL(p,wrecon_last env A' (R.plus (pot,p)) pot' P C ext)
  | wrecon_last env (A.Forall(phi,A')) pot pot' P C ext =
    A.AssertL(phi,wrecon_last env A' pot pot' P C ext)
  | wrecon_last env A pot pot' P (A.Exists(phi,C')) ext =
    A.AssertR(phi,wrecon_last env A pot pot' P C' ext) 
  | wrecon_last env A pot pot' P C ext = (* type definitions must be neutral *)
    create_work (R.minus (pot,pot')) P (* pot >= pot' *)

(* wrecon env A pot P C = P' iff A |(pot)- P : C
 * raises exception if P is not well-typed
 *)
fun wrecon' env A pot P C ext =
    ( if false
      then TextIO.print (PP.pp_exp_prefix P ^ " : " ^ PP.pp_tp_ext env A ^ " |" ^ P.pp_pot pot ^ "- " ^ PP.pp_tp_ext env C ^ "\n")
      else ()
    ; wrecon env A pot P C ext )

and wrecon_spawn env (A.GetPot(p,A')) pot PQ C ext =
    A.PayL(p, wrecon_spawn env A' (R.minus (pot,p)) PQ C ext)
  | wrecon_spawn env (A.Forall(phi,A')) pot PQ C ext =
    A.AssertL(phi, wrecon_spawn env A' pot PQ C ext)
  | wrecon_spawn env (A.TpName(a,es)) pot PQ C ext =
    wrecon_spawn env (A.expd_tp env (a,es)) pot PQ C ext
  (* we don't consider type names,
   * type names cannot start with GetPot or Forall
   *)
   (* don't reconstruct P,
    * we already handled type A on the left,
    * type B in the middle is already valid
    *)
  | wrecon_spawn env A pot (A.Spawn(P,Q)) C ext =
    let val A.Cut(_,lpot,B,_) = TC.syn_cut env (P,Q) ext
    in
    A.Spawn(P, wrecon env B (R.minus (pot,lpot)) Q C ext)
    end

and wrecon env A pot (A.Cut(P,lpot,B,Q)) C ext =
      A.Cut(wrecon' env A lpot P B ext, lpot, B,
            wrecon' env B (R.minus (pot,lpot)) Q C ext) (* pot >= lpot *)
  | wrecon env A pot (A.Spawn(P,Q)) C ext =
    wrecon_spawn env A pot (A.Spawn(P,Q)) C ext
    (* wrecon env A pot (TC.syn_cut env (P,Q) ext) C ext *)
  | wrecon env A pot (A.Id) C ext =
    wrecon_last env A pot (R.Int(0)) A.Id C ext
  | wrecon env A pot (A.LabR(k,P)) (C as A.Plus(choices)) ext =
    (case A.lookup_choice choices k
      of SOME(Ck) => A.LabR(k,wrecon' env A pot P Ck ext)
       | NONE => error_label_invalid env (k, C, ext))
  | wrecon env (A.Plus(choices)) pot (A.CaseL(branches)) C ext =
    A.CaseL(wrecon_branchesL env choices pot branches C ext)
  | wrecon env (A as A.With(choices)) pot (A.LabL(k,Q)) C ext =
    (case A.lookup_choice choices k
      of SOME(Ak) => A.LabL(k,wrecon' env Ak pot Q C ext)
       | NONE => error_label_invalid env (k, A, ext))
  | wrecon env A pot (A.CaseR(branches)) (A.With(choices)) ext =
    A.CaseR(wrecon_branchesR env A pot branches choices ext)
  | wrecon env (A.Dot) pot (A.CloseR) C ext =
    wrecon_last env A.Dot pot (R.Int(0)) A.CloseR C ext
  | wrecon env (A.One) pot (A.WaitL(Q)) C ext =
    A.WaitL(wrecon' env (A.Dot) pot Q C ext)
  (* for now: should not be mixed with time reconstruction *)
  | wrecon env A pot (P as A.Delay _) C ext = ERROR ext ("time cannot be mixed with work reconstruction")

  (* should not be allowed in the term before reconstruction *)
  | wrecon env A pot (P as A.WhenR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.NowL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.WhenL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.NowR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.PayR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.PayL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.GetR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.GetL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.AssumeR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.ImpossR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.AssertL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.AssertR _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.AssumeL _) C ext = error_implicit (P,ext)
  | wrecon env A pot (P as A.ImpossL _) C ext = error_implicit (P,ext)

  | wrecon env A pot (A.Work(p,P)) C ext =
    A.Work(p, wrecon' env A (R.minus (pot,p)) P C ext) (* pot >= p *)
  | wrecon env A pot (A.Marked(marked_P)) C ext =
    wrecon' env A pot (Mark.data marked_P) C (Mark.ext marked_P)
  | wrecon  env A pot (P as A.ExpName(f,es)) C ext =
    (* verify the type, but also make sure f is defined somewhere *)
    (case (A.expd_expdec env (f,es), A.lookup_expdef env f)
      of (SOME(A',pot',C'), SOME _) => wrecon_last env A pot pot' P C ext (* pot >= pot' *)
       | (NONE, _) => ERROR ext ("process " ^ f ^ " undeclared")
       | (_, NONE) => ERROR ext ("process " ^ f ^ " undefined"))
  (* remaining cases: expand type definition or receive potential *)
  | wrecon env A pot P C ext =
    case (A, interacts P, C)
      of (A.TpName(a,es), Left, _) => wrecon env (A.expd_tp env (a,es)) pot P C ext
       | (A.GetPot(p,A'), Left, _) => A.PayL(p,wrecon env A' (R.minus (pot,p)) P C ext) (* pot >= p *)
       | (A.Forall(phi,A'), Left, _) => A.AssertL(phi, wrecon env A' pot P C ext)
       | (_, Right, A.TpName(c,es)) => wrecon env A pot P (A.expd_tp env (c,es)) ext
       | (_, Right, A.PayPot(p,C')) => A.PayR(p,wrecon env A (R.minus (pot,p)) P C' ext) (* pot >= p *)
       | (_, Right, A.Exists(phi,C')) => A.AssertR(phi, wrecon env A pot P C' ext)
       | (_, _, _) => ERROR ext ("process does not match " ^ PP.pp_tp_short env A ^ " |" ^ P.pp_pot pot ^ "- " ^ PP.pp_tp_short env C)

(* wrecon_branchesL env choices branches C ext = (branches')
 * for client of internal choice
 *)
and wrecon_recvL env (A.PayPot(p,A')) pot P C ext =
    A.GetL(p,wrecon_recvL env A' (R.plus (pot,p)) P C ext)
  | wrecon_recvL env (A.Exists(phi,A')) pot P C ext =
    A.AssumeL(phi, wrecon_recvL env A' pot P C ext)
  | wrecon_recvL env (A.TpName(a,es)) pot P C ext =
    wrecon_recvL env (A.expd_tp env (a,es)) pot P C ext
  | wrecon_recvL env A pot P C ext = wrecon' env A pot P C ext

and wrecon_branchesL env nil pot nil C ext = nil
  | wrecon_branchesL env ((l,A)::choices) pot ((l',ext',P)::branches) C ext =
    (* for now, require exact order *)
    ( if false then TextIO.print ("| " ^ l' ^ " => \n") else ()
    ; if l = l'
      then (l',ext',wrecon_recvL env A pot P C ext)::(wrecon_branchesL env choices pot branches C ext)
      else (impossL_branch env (l,A) l' ext')::(wrecon_branchesL env choices pot ((l',ext',P)::branches) C ext))
  | wrecon_branchesL env ((l,A)::choices) pot nil C ext = 
    (impossL_branch env (l,A) "<none>" ext)::(wrecon_branchesL env choices pot nil C ext)
  | wrecon_branchesL env nil pot ((l',ext',P)::_) C ext = error_label_missing_alt (l', ext')

(* wrecon_branchesR env A branches choices = (branches')
 * for provider of external choice
 *)
and wrecon_recvR env A pot P (A.GetPot(p,C')) ext =
    A.GetR(p,wrecon_recvR env A (R.plus (pot,p)) P C' ext)
  | wrecon_recvR env A pot P (A.Forall(phi,C')) ext =
    A.AssumeR(phi, wrecon_recvR env A pot P C' ext)
  | wrecon_recvR env A pot P (A.TpName(a,es)) ext =
    wrecon_recvR env A pot P (A.expd_tp env (a,es)) ext
  | wrecon_recvR env A pot P C ext = wrecon' env A pot P C ext

and wrecon_branchesR env A pot nil nil ext = nil
  | wrecon_branchesR env A pot ((l,ext',P)::branches) ((l',C)::choices) ext =
    (* for now, require exact order *)
    ( if false then TextIO.print ("| " ^ l ^ " => \n") else ()
    ; if l = l'
      then (l,ext',wrecon_recvR env A pot P C ext)::(wrecon_branchesR env A pot branches choices ext)
      else (impossR_branch env (l',C) l ext')::(wrecon_branchesR env A pot ((l,ext',P)::branches) choices ext))
  | wrecon_branchesR env A pot ((l,ext',P)::_) nil ext = error_label_missing_alt (l, ext')
  | wrecon_branchesR env A pot nil ((l',C)::choices) ext =
    (impossR_branch env (l',C) "<none>" ext)::(wrecon_branchesR env A pot nil choices ext)


end (* structure Recon *)
